# step 11
"""
Давайте воссоздадим эту формулу в виде класса QuadraticFunction, в котором есть:
метод __init__. Он должен сохранять в экземпляр класса три атрибута: a , b и c.
метод __call__ , который принимает аргумент x, подставляет его в формулу выше,
 находит значение и возвращает его в качестве результата"""


class QuadraticFunction:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __call__(self, x):
        return self.a * x ** 2 + self.b * x + self.c


# step 12
""" Создайте класс Addition, у которого необходимо:

определить метод __call__. Он должен принимать произвольное количество
 аргументов и среди этих аргументов находить числа и их суммировать.
  Все остальные типы данных необходимо пропускать. В результате метод __call__ должен вернуть 
  строку в следующем в виде:
Сумма переданных значений = {сумма}"""


class Addition:
    def __call__(self, *args, **kwargs):
        sums = 0
        for arg in args:
            if isinstance(arg, (int, float)):
                sums += arg
        return f'Сумма переданных значений = {sums}'
