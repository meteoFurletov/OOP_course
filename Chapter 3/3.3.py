# set 6
"""Создайте класс Rectangle, который имеет следующие методы:

метод __init__, который устанавливает значения атрибутов width и height:
 ширина и высота прямоугольника

магический метод __add__, который описывает сложение двух прямоугольников.
 Результатом такого сложения должен быть новый прямоугольник,
  в котором ширина и высота получились в результате сложения исходных прямоугольников.
  Новый прямоугольник нужно вернуть в качестве результата вызова метода __add__.
  Сложения с другими типами данных реализовывать не нужно
 магический метод __str__, который возвращает строковое представление
 прямоугольника в следующем виде:

Rectangle({width}x{height})"""


class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def __add__(self, other):
        return Rectangle(self.width + other.width, self.height + other.height)

    def __str__(self):
        return f'Rectangle({self.width}x{self.height})'


# step 9
"""Создайте класс  Order, который имеет следующие методы:

метод __init__, который устанавливает значения атрибутов cart и customer: 
список покупок и имя покупателя
 
магический метод __add__, который описывает добавления товара в список покупок. 
Результатом такого сложения должен быть новый заказ, в котором все покупки берутся 
из старого заказа и в конец добавляется новый товар. Покупатель в заказе остается прежним
 
магический метод __radd__, который описывает добавления товара в список покупок 
при правостороннем сложении. Результатом такого сложения должен быть новый заказ,
 в котором все покупки берутся из старого заказа и в начало списка покупок 
 добавляется новый товар. Покупатель в заказе остается прежним
 
 магический метод __sub__, который описывает исключение товара из списка покупок.
  Результатом вычитания должен быть новый заказ
 

магический метод __rsub__, который описывает исключение товара из списка покупок
 при правостороннем вычитании. Результатом должен быть таким же как и при __sub__"""


class Order:
    def __init__(self, cart, customer):
        if isinstance(cart, list):
            self.cart = cart
        if isinstance(cart, str):
            self.cart = [cart]
        self.customer = customer

    def __add__(self, other):
        return Order(self.cart + [other], self.customer)

    def __radd__(self, other):
        return Order([other] + self.cart, self.customer)

    def __sub__(self, other):
        if other in self.cart:
            self.cart.remove(other)
            return Order(self.cart, self.customer)
        else:
            return Order(self.cart, self.customer)

    def __rsub__(self, other):
        return self - other


# step 10
"""Ваша задача создать класс Vector, который хранит в себе вектор целых чисел.
  У класса Vector есть:

конструктор __init__, принимающий произвольное количество аргументов.
 Среди всех переданных аргументов необходимо оставить только целые числа 
 и сохранить их в атрибут values в виде списка. Причем значения должны хранится 
 в порядке неубывания. В случае, если целых чисел не передано, нужно в атрибут
  values сохранять пустой список; 
переопределить метод __str__ так, чтобы экземпляр класса Vector выводился следующим образом: 
"Вектор(<value1>, <value2>, <value3>, ...)", если вектор не пустой.
 При этом значения должны быть упорядочены по возрастанию;
"Пустой вектор", если наш вектор не хранит в себе значения
переопределить метод __add__ так, чтобы экземпляр класса Vector мог складываться
с целым числом, в результате должен получиться новый Vector, у которого каждый 
элемент атрибута values увеличен на число
с другим вектором такой же длины. В результате должен получиться новый Vector, 
состоящий из суммы элементов, расположенных на одинаковых местах. Если длины векторов различаются,
 выведите сообщение "Сложение векторов разной длины недопустимо";
В случае, если вектор складывается с другим типом(не числом и не вектором), нужны вывести 
сообщение "Вектор нельзя сложить с <значением>"
переопределить метод __mul__ так, чтобы экземпляр класса Vector мог умножаться
на целое число. В результате должен получиться новый Vector, у которого каждый элемент 
атрибута values умножен на переданное число;
на другой вектор такой же длины. В результате должен получиться новый Vector, состоящий из 
произведения элементов, расположенных на одинаковых местах. Если длины векторов различаются, 
выведите сообщение "Умножение векторов разной длины недопустимо";
В случае, если вектор умножается с другим типом(не числом и не вектором), нужны вывести 
сообщение "Вектор нельзя умножать с <значением>";"""


class Vector:

    def __init__(self, *args):
        le_list = []
        for value in args:
            if isinstance(value, int):
                le_list.append(value)
        self.values = sorted(le_list)

    def __str__(self):
        if self.values:
            b = [str(i) for i in self.values]
            return f"Вектор({', '.join(b)})"
        else:
            return "Пустой вектор"

    def __add__(self, other):
        if isinstance(other, int):
            le_list = [value + other for value in self.values]
            return Vector(*le_list)
        elif isinstance(other, Vector):
            if len(other.values) == len(self.values):
                le_list = [sum(x) for x in zip(self.values, other.values)]
                return Vector(*le_list)
            else:
                print("Сложение векторов разной длины недопустимо")
        else:
            print(f"Вектор нельзя сложить с {other}")

    def __mul__(self, other):
        if isinstance(other, int):
            le_list = [value * other for value in self.values]
            return Vector(*le_list)
        if isinstance(other, Vector):
            if len(other.values) == len(self.values):
                le_list = [x * y for x, y in zip(self.values, other.values)]
                return Vector(*le_list)
            else:
                print("Умножение векторов разной длины недопустимо")
        else:
            print(f"Вектор нельзя умножать с {other}")


v1 = Vector(1, 2, 3)
print(v1)  # печатает "Вектор(1, 2, 3)"

v2 = Vector(3, 4, 5)
print(v2)  # печатает "Вектор(3, 4, 5)"
v3 = v1 + v2
print(v3)  # печатает "Вектор(4, 6, 8)"
v4 = v3 + 5
print(v4)  # печатает "Вектор(9, 11, 13)"
v5 = v1 * 2
print(v5)  # печатает "Вектор(2, 4, 6)"
v5 + 'hi'  # печатает "Вектор нельзя сложить с hi"
